"""Direct the client to resolve this field locally, either from the cache or local resolvers."""
directive @client(
  """
  When true, the client will never use the cache for this value. See
  https://www.apollographql.com/docs/react/essentials/local-state/#forcing-resolvers-with-clientalways-true
  """
  always: Boolean
) on FIELD | FRAGMENT_DEFINITION | INLINE_FRAGMENT

"""
Export this locally resolved field as a variable to be used in the remainder of this query. See
https://www.apollographql.com/docs/react/essentials/local-state/#using-client-fields-as-variables
"""
directive @export(
  """The variable name to export this field as."""
  as: String!
) on FIELD

"""
Specify a custom store key for this result. See
https://www.apollographql.com/docs/react/advanced/caching/#the-connection-directive
"""
directive @connection(
  """Specify the store key."""
  key: String!
  """An array of query argument names to include in the generated custom store key."""
  filter: [String!]
) on FIELD

input FileInfoInput {
  name: String
  alternativeText: String
  caption: String
}

type UsersPermissionsMe {
  id: ID!
  username: String!
  email: String!
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  id: ID!
  name: String!
  description: String
  type: String
}

input UsersPermissionsRegisterInput {
  username: String!
  email: String!
  password: String!
}

input UsersPermissionsLoginInput {
  identifier: String!
  password: String!
  provider: String = "local"
}

type UsersPermissionsLoginPayload {
  jwt: String
  user: UsersPermissionsMe!
}

type UserPermissionsPasswordPayload {
  ok: Boolean!
}

type Category {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String
  slug: String
  property: Property
}

type CategoryConnection {
  values: [Category]
  groupBy: CategoryGroupBy
  aggregate: CategoryAggregator
}

type CategoryAggregator {
  count: Int
  totalCount: Int
}

type CategoryGroupBy {
  id: [CategoryConnectionId]
  created_at: [CategoryConnectionCreated_at]
  updated_at: [CategoryConnectionUpdated_at]
  name: [CategoryConnectionName]
  slug: [CategoryConnectionSlug]
  property: [CategoryConnectionProperty]
}

type CategoryConnectionId {
  key: ID
  connection: CategoryConnection
}

type CategoryConnectionCreated_at {
  key: DateTime
  connection: CategoryConnection
}

type CategoryConnectionUpdated_at {
  key: DateTime
  connection: CategoryConnection
}

type CategoryConnectionName {
  key: String
  connection: CategoryConnection
}

type CategoryConnectionSlug {
  key: String
  connection: CategoryConnection
}

type CategoryConnectionProperty {
  key: ID
  connection: CategoryConnection
}

input CategoryInput {
  name: String
  slug: String
  property: ID
  created_by: ID
  updated_by: ID
}

input editCategoryInput {
  name: String
  slug: String
  property: ID
  created_by: ID
  updated_by: ID
}

input createCategoryInput {
  data: CategoryInput
}

type createCategoryPayload {
  category: Category
}

input updateCategoryInput {
  where: InputID
  data: editCategoryInput
}

type updateCategoryPayload {
  category: Category
}

input deleteCategoryInput {
  where: InputID
}

type deleteCategoryPayload {
  category: Category
}

type Facilities {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String!
  property: Property
}

type FacilitiesConnection {
  values: [Facilities]
  groupBy: FacilitiesGroupBy
  aggregate: FacilitiesAggregator
}

type FacilitiesAggregator {
  count: Int
  totalCount: Int
}

type FacilitiesGroupBy {
  id: [FacilitiesConnectionId]
  created_at: [FacilitiesConnectionCreated_at]
  updated_at: [FacilitiesConnectionUpdated_at]
  name: [FacilitiesConnectionName]
  property: [FacilitiesConnectionProperty]
}

type FacilitiesConnectionId {
  key: ID
  connection: FacilitiesConnection
}

type FacilitiesConnectionCreated_at {
  key: DateTime
  connection: FacilitiesConnection
}

type FacilitiesConnectionUpdated_at {
  key: DateTime
  connection: FacilitiesConnection
}

type FacilitiesConnectionName {
  key: String
  connection: FacilitiesConnection
}

type FacilitiesConnectionProperty {
  key: ID
  connection: FacilitiesConnection
}

input FacilityInput {
  name: String!
  property: ID
  created_by: ID
  updated_by: ID
}

input editFacilityInput {
  name: String
  property: ID
  created_by: ID
  updated_by: ID
}

input createFacilityInput {
  data: FacilityInput
}

type createFacilityPayload {
  facility: Facilities
}

input updateFacilityInput {
  where: InputID
  data: editFacilityInput
}

type updateFacilityPayload {
  facility: Facilities
}

input deleteFacilityInput {
  where: InputID
}

type deleteFacilityPayload {
  facility: Facilities
}

type Location {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String!
  slug: String
  property: Property
}

type LocationConnection {
  values: [Location]
  groupBy: LocationGroupBy
  aggregate: LocationAggregator
}

type LocationAggregator {
  count: Int
  totalCount: Int
}

type LocationGroupBy {
  id: [LocationConnectionId]
  created_at: [LocationConnectionCreated_at]
  updated_at: [LocationConnectionUpdated_at]
  name: [LocationConnectionName]
  slug: [LocationConnectionSlug]
  property: [LocationConnectionProperty]
}

type LocationConnectionId {
  key: ID
  connection: LocationConnection
}

type LocationConnectionCreated_at {
  key: DateTime
  connection: LocationConnection
}

type LocationConnectionUpdated_at {
  key: DateTime
  connection: LocationConnection
}

type LocationConnectionName {
  key: String
  connection: LocationConnection
}

type LocationConnectionSlug {
  key: String
  connection: LocationConnection
}

type LocationConnectionProperty {
  key: ID
  connection: LocationConnection
}

input LocationInput {
  name: String!
  slug: String
  property: ID
  created_by: ID
  updated_by: ID
}

input editLocationInput {
  name: String
  slug: String
  property: ID
  created_by: ID
  updated_by: ID
}

input createLocationInput {
  data: LocationInput
}

type createLocationPayload {
  location: Location
}

input updateLocationInput {
  where: InputID
  data: editLocationInput
}

type updateLocationPayload {
  location: Location
}

input deleteLocationInput {
  where: InputID
}

type deleteLocationPayload {
  location: Location
}

enum ENUM_PROPERTY_STATUS {
  Rent
  Sale
}

enum ENUM_PROPERTY_LABEL {
  featured
  hot
}

type Property {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String!
  street: String!
  price: Float
  status: ENUM_PROPERTY_STATUS
  description: String!
  cover: UploadFile
  rooms: Int!
  bathrooms: Int!
  garage: Int
  sqt: Int
  category: Category
  location: Location
  label: ENUM_PROPERTY_LABEL
  year: Date
  slug: String!
  published_at: DateTime
  gallery(sort: String, limit: Int, start: Int, where: JSON): [UploadFile!]!
  facilities(sort: String, limit: Int, start: Int, where: JSON): [Facilities!]!
}

type PropertyConnection {
  values: [Property]
  groupBy: PropertyGroupBy
  aggregate: PropertyAggregator
}

type PropertyAggregator {
  count: Int
  totalCount: Int
  sum: PropertyAggregatorSum
  avg: PropertyAggregatorAvg
  min: PropertyAggregatorMin
  max: PropertyAggregatorMax
}

type PropertyAggregatorSum {
  price: Float
  rooms: Float
  bathrooms: Float
  garage: Float
  sqt: Float
}

type PropertyAggregatorAvg {
  price: Float
  rooms: Float
  bathrooms: Float
  garage: Float
  sqt: Float
}

type PropertyAggregatorMin {
  price: Float
  rooms: Float
  bathrooms: Float
  garage: Float
  sqt: Float
}

type PropertyAggregatorMax {
  price: Float
  rooms: Float
  bathrooms: Float
  garage: Float
  sqt: Float
}

type PropertyGroupBy {
  id: [PropertyConnectionId]
  created_at: [PropertyConnectionCreated_at]
  updated_at: [PropertyConnectionUpdated_at]
  name: [PropertyConnectionName]
  street: [PropertyConnectionStreet]
  price: [PropertyConnectionPrice]
  status: [PropertyConnectionStatus]
  description: [PropertyConnectionDescription]
  cover: [PropertyConnectionCover]
  rooms: [PropertyConnectionRooms]
  bathrooms: [PropertyConnectionBathrooms]
  garage: [PropertyConnectionGarage]
  sqt: [PropertyConnectionSqt]
  category: [PropertyConnectionCategory]
  location: [PropertyConnectionLocation]
  label: [PropertyConnectionLabel]
  year: [PropertyConnectionYear]
  slug: [PropertyConnectionSlug]
  published_at: [PropertyConnectionPublished_at]
}

type PropertyConnectionId {
  key: ID
  connection: PropertyConnection
}

type PropertyConnectionCreated_at {
  key: DateTime
  connection: PropertyConnection
}

type PropertyConnectionUpdated_at {
  key: DateTime
  connection: PropertyConnection
}

type PropertyConnectionName {
  key: String
  connection: PropertyConnection
}

type PropertyConnectionStreet {
  key: String
  connection: PropertyConnection
}

type PropertyConnectionPrice {
  key: Float
  connection: PropertyConnection
}

type PropertyConnectionStatus {
  key: String
  connection: PropertyConnection
}

type PropertyConnectionDescription {
  key: String
  connection: PropertyConnection
}

type PropertyConnectionCover {
  key: ID
  connection: PropertyConnection
}

type PropertyConnectionRooms {
  key: Int
  connection: PropertyConnection
}

type PropertyConnectionBathrooms {
  key: Int
  connection: PropertyConnection
}

type PropertyConnectionGarage {
  key: Int
  connection: PropertyConnection
}

type PropertyConnectionSqt {
  key: Int
  connection: PropertyConnection
}

type PropertyConnectionCategory {
  key: ID
  connection: PropertyConnection
}

type PropertyConnectionLocation {
  key: ID
  connection: PropertyConnection
}

type PropertyConnectionLabel {
  key: String
  connection: PropertyConnection
}

type PropertyConnectionYear {
  key: ID
  connection: PropertyConnection
}

type PropertyConnectionSlug {
  key: String
  connection: PropertyConnection
}

type PropertyConnectionPublished_at {
  key: DateTime
  connection: PropertyConnection
}

input PropertyInput {
  name: String!
  street: String!
  price: Float
  status: ENUM_PROPERTY_STATUS
  description: String!
  cover: ID
  gallery: [ID]
  rooms: Int!
  bathrooms: Int!
  garage: Int
  sqt: Int
  category: ID
  location: ID
  facilities: [ID]
  label: ENUM_PROPERTY_LABEL
  year: Date
  slug: String!
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editPropertyInput {
  name: String
  street: String
  price: Float
  status: ENUM_PROPERTY_STATUS
  description: String
  cover: ID
  gallery: [ID]
  rooms: Int
  bathrooms: Int
  garage: Int
  sqt: Int
  category: ID
  location: ID
  facilities: [ID]
  label: ENUM_PROPERTY_LABEL
  year: Date
  slug: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createPropertyInput {
  data: PropertyInput
}

type createPropertyPayload {
  property: Property
}

input updatePropertyInput {
  where: InputID
  data: editPropertyInput
}

type updatePropertyPayload {
  property: Property
}

input deletePropertyInput {
  where: InputID
}

type deletePropertyPayload {
  property: Property
}

type I18NLocale {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String
  code: String
}

input LocaleInput {
  name: String
  code: String
  created_by: ID
  updated_by: ID
}

input editLocaleInput {
  name: String
  code: String
  created_by: ID
  updated_by: ID
}

type UploadFile {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String!
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String!
  ext: String
  mime: String!
  size: Float!
  url: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph!]!
}

type UploadFileConnection {
  values: [UploadFile]
  groupBy: UploadFileGroupBy
  aggregate: UploadFileAggregator
}

type UploadFileAggregator {
  count: Int
  totalCount: Int
  sum: UploadFileAggregatorSum
  avg: UploadFileAggregatorAvg
  min: UploadFileAggregatorMin
  max: UploadFileAggregatorMax
}

type UploadFileAggregatorSum {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorAvg {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorMin {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorMax {
  width: Float
  height: Float
  size: Float
}

type UploadFileGroupBy {
  id: [UploadFileConnectionId]
  created_at: [UploadFileConnectionCreated_at]
  updated_at: [UploadFileConnectionUpdated_at]
  name: [UploadFileConnectionName]
  alternativeText: [UploadFileConnectionAlternativeText]
  caption: [UploadFileConnectionCaption]
  width: [UploadFileConnectionWidth]
  height: [UploadFileConnectionHeight]
  formats: [UploadFileConnectionFormats]
  hash: [UploadFileConnectionHash]
  ext: [UploadFileConnectionExt]
  mime: [UploadFileConnectionMime]
  size: [UploadFileConnectionSize]
  url: [UploadFileConnectionUrl]
  previewUrl: [UploadFileConnectionPreviewUrl]
  provider: [UploadFileConnectionProvider]
  provider_metadata: [UploadFileConnectionProvider_metadata]
}

type UploadFileConnectionId {
  key: ID
  connection: UploadFileConnection
}

type UploadFileConnectionCreated_at {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionUpdated_at {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionName {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionAlternativeText {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionCaption {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionWidth {
  key: Int
  connection: UploadFileConnection
}

type UploadFileConnectionHeight {
  key: Int
  connection: UploadFileConnection
}

type UploadFileConnectionFormats {
  key: JSON
  connection: UploadFileConnection
}

type UploadFileConnectionHash {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionExt {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionMime {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionSize {
  key: Float
  connection: UploadFileConnection
}

type UploadFileConnectionUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionPreviewUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider_metadata {
  key: JSON
  connection: UploadFileConnection
}

input FileInput {
  name: String!
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String!
  ext: String
  mime: String!
  size: Float!
  url: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related: [ID]
  created_by: ID
  updated_by: ID
}

input editFileInput {
  name: String
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String
  ext: String
  mime: String
  size: Float
  url: String
  previewUrl: String
  provider: String
  provider_metadata: JSON
  related: [ID]
  created_by: ID
  updated_by: ID
}

input deleteFileInput {
  where: InputID
}

type deleteFilePayload {
  file: UploadFile
}

type UsersPermissionsPermission {
  id: ID!
  type: String!
  controller: String!
  action: String!
  enabled: Boolean!
  policy: String
  role: UsersPermissionsRole
}

type UsersPermissionsRole {
  id: ID!
  name: String!
  description: String
  type: String
  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission!]!
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser!]!
}

type UsersPermissionsRoleConnection {
  values: [UsersPermissionsRole]
  groupBy: UsersPermissionsRoleGroupBy
  aggregate: UsersPermissionsRoleAggregator
}

type UsersPermissionsRoleAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsRoleGroupBy {
  id: [UsersPermissionsRoleConnectionId]
  name: [UsersPermissionsRoleConnectionName]
  description: [UsersPermissionsRoleConnectionDescription]
  type: [UsersPermissionsRoleConnectionType]
}

type UsersPermissionsRoleConnectionId {
  key: ID
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionName {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionDescription {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionType {
  key: String
  connection: UsersPermissionsRoleConnection
}

input RoleInput {
  name: String!
  description: String
  type: String
  permissions: [ID]
  users: [ID]
  created_by: ID
  updated_by: ID
}

input editRoleInput {
  name: String
  description: String
  type: String
  permissions: [ID]
  users: [ID]
  created_by: ID
  updated_by: ID
}

input createRoleInput {
  data: RoleInput
}

type createRolePayload {
  role: UsersPermissionsRole
}

input updateRoleInput {
  where: InputID
  data: editRoleInput
}

type updateRolePayload {
  role: UsersPermissionsRole
}

input deleteRoleInput {
  where: InputID
}

type deleteRolePayload {
  role: UsersPermissionsRole
}

type UsersPermissionsUser {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRole
}

type UsersPermissionsUserConnection {
  values: [UsersPermissionsUser]
  groupBy: UsersPermissionsUserGroupBy
  aggregate: UsersPermissionsUserAggregator
}

type UsersPermissionsUserAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsUserGroupBy {
  id: [UsersPermissionsUserConnectionId]
  created_at: [UsersPermissionsUserConnectionCreated_at]
  updated_at: [UsersPermissionsUserConnectionUpdated_at]
  username: [UsersPermissionsUserConnectionUsername]
  email: [UsersPermissionsUserConnectionEmail]
  provider: [UsersPermissionsUserConnectionProvider]
  confirmed: [UsersPermissionsUserConnectionConfirmed]
  blocked: [UsersPermissionsUserConnectionBlocked]
  role: [UsersPermissionsUserConnectionRole]
}

type UsersPermissionsUserConnectionId {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionCreated_at {
  key: DateTime
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUpdated_at {
  key: DateTime
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUsername {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionEmail {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionProvider {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionConfirmed {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionBlocked {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionRole {
  key: ID
  connection: UsersPermissionsUserConnection
}

input UserInput {
  username: String!
  email: String!
  provider: String
  password: String
  resetPasswordToken: String
  confirmationToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
  created_by: ID
  updated_by: ID
}

input editUserInput {
  username: String
  email: String
  provider: String
  password: String
  resetPasswordToken: String
  confirmationToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
  created_by: ID
  updated_by: ID
}

input createUserInput {
  data: UserInput
}

type createUserPayload {
  user: UsersPermissionsUser
}

input updateUserInput {
  where: InputID
  data: editUserInput
}

type updateUserPayload {
  user: UsersPermissionsUser
}

input deleteUserInput {
  where: InputID
}

type deleteUserPayload {
  user: UsersPermissionsUser
}

union Morph = UsersPermissionsMe | UsersPermissionsMeRole | UsersPermissionsLoginPayload | UserPermissionsPasswordPayload | Category | CategoryConnection | CategoryAggregator | CategoryGroupBy | CategoryConnectionId | CategoryConnectionCreated_at | CategoryConnectionUpdated_at | CategoryConnectionName | CategoryConnectionSlug | CategoryConnectionProperty | createCategoryPayload | updateCategoryPayload | deleteCategoryPayload | Facilities | FacilitiesConnection | FacilitiesAggregator | FacilitiesGroupBy | FacilitiesConnectionId | FacilitiesConnectionCreated_at | FacilitiesConnectionUpdated_at | FacilitiesConnectionName | FacilitiesConnectionProperty | createFacilityPayload | updateFacilityPayload | deleteFacilityPayload | Location | LocationConnection | LocationAggregator | LocationGroupBy | LocationConnectionId | LocationConnectionCreated_at | LocationConnectionUpdated_at | LocationConnectionName | LocationConnectionSlug | LocationConnectionProperty | createLocationPayload | updateLocationPayload | deleteLocationPayload | Property | PropertyConnection | PropertyAggregator | PropertyAggregatorSum | PropertyAggregatorAvg | PropertyAggregatorMin | PropertyAggregatorMax | PropertyGroupBy | PropertyConnectionId | PropertyConnectionCreated_at | PropertyConnectionUpdated_at | PropertyConnectionName | PropertyConnectionStreet | PropertyConnectionPrice | PropertyConnectionStatus | PropertyConnectionDescription | PropertyConnectionCover | PropertyConnectionRooms | PropertyConnectionBathrooms | PropertyConnectionGarage | PropertyConnectionSqt | PropertyConnectionCategory | PropertyConnectionLocation | PropertyConnectionLabel | PropertyConnectionYear | PropertyConnectionSlug | PropertyConnectionPublished_at | createPropertyPayload | updatePropertyPayload | deletePropertyPayload | I18NLocale | UploadFile | UploadFileConnection | UploadFileAggregator | UploadFileAggregatorSum | UploadFileAggregatorAvg | UploadFileAggregatorMin | UploadFileAggregatorMax | UploadFileGroupBy | UploadFileConnectionId | UploadFileConnectionCreated_at | UploadFileConnectionUpdated_at | UploadFileConnectionName | UploadFileConnectionAlternativeText | UploadFileConnectionCaption | UploadFileConnectionWidth | UploadFileConnectionHeight | UploadFileConnectionFormats | UploadFileConnectionHash | UploadFileConnectionExt | UploadFileConnectionMime | UploadFileConnectionSize | UploadFileConnectionUrl | UploadFileConnectionPreviewUrl | UploadFileConnectionProvider | UploadFileConnectionProvider_metadata | deleteFilePayload | UsersPermissionsPermission | UsersPermissionsRole | UsersPermissionsRoleConnection | UsersPermissionsRoleAggregator | UsersPermissionsRoleGroupBy | UsersPermissionsRoleConnectionId | UsersPermissionsRoleConnectionName | UsersPermissionsRoleConnectionDescription | UsersPermissionsRoleConnectionType | createRolePayload | updateRolePayload | deleteRolePayload | UsersPermissionsUser | UsersPermissionsUserConnection | UsersPermissionsUserAggregator | UsersPermissionsUserGroupBy | UsersPermissionsUserConnectionId | UsersPermissionsUserConnectionCreated_at | UsersPermissionsUserConnectionUpdated_at | UsersPermissionsUserConnectionUsername | UsersPermissionsUserConnectionEmail | UsersPermissionsUserConnectionProvider | UsersPermissionsUserConnectionConfirmed | UsersPermissionsUserConnectionBlocked | UsersPermissionsUserConnectionRole | createUserPayload | updateUserPayload | deleteUserPayload

input InputID {
  id: ID!
}

enum PublicationState {
  LIVE
  PREVIEW
}

type AdminUser {
  id: ID!
  username: String
  firstname: String!
  lastname: String!
}

type Query {
  category(id: ID!, publicationState: PublicationState): Category
  categories(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Category!]!
  categoriesConnection(sort: String, limit: Int, start: Int, where: JSON): CategoryConnection
  facility(id: ID!, publicationState: PublicationState): Facilities
  facilities(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Facilities!]!
  facilitiesConnection(sort: String, limit: Int, start: Int, where: JSON): FacilitiesConnection
  location(id: ID!, publicationState: PublicationState): Location
  locations(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Location!]!
  locationsConnection(sort: String, limit: Int, start: Int, where: JSON): LocationConnection
  property(id: ID!, publicationState: PublicationState): Property
  properties(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Property!]!
  propertiesConnection(sort: String, limit: Int, start: Int, where: JSON): PropertyConnection
  files(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [UploadFile!]!
  filesConnection(sort: String, limit: Int, start: Int, where: JSON): UploadFileConnection
  role(id: ID!, publicationState: PublicationState): UsersPermissionsRole
  """Retrieve all the existing roles. You can't apply filters on this query."""
  roles(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [UsersPermissionsRole!]!
  rolesConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsRoleConnection
  user(id: ID!, publicationState: PublicationState): UsersPermissionsUser
  users(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [UsersPermissionsUser!]!
  usersConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsUserConnection
  me: UsersPermissionsMe
}

type Mutation {
  createCategory(input: createCategoryInput): createCategoryPayload
  updateCategory(input: updateCategoryInput): updateCategoryPayload
  deleteCategory(input: deleteCategoryInput): deleteCategoryPayload
  createFacility(input: createFacilityInput): createFacilityPayload
  updateFacility(input: updateFacilityInput): updateFacilityPayload
  deleteFacility(input: deleteFacilityInput): deleteFacilityPayload
  createLocation(input: createLocationInput): createLocationPayload
  updateLocation(input: updateLocationInput): updateLocationPayload
  deleteLocation(input: deleteLocationInput): deleteLocationPayload
  createProperty(input: createPropertyInput): createPropertyPayload
  updateProperty(input: updatePropertyInput): updatePropertyPayload
  deleteProperty(input: deletePropertyInput): deletePropertyPayload
  """Delete one file"""
  deleteFile(input: deleteFileInput): deleteFilePayload
  """Create a new role"""
  createRole(input: createRoleInput): createRolePayload
  """Update an existing role"""
  updateRole(input: updateRoleInput): updateRolePayload
  """Delete an existing role"""
  deleteRole(input: deleteRoleInput): deleteRolePayload
  """Create a new user"""
  createUser(input: createUserInput): createUserPayload
  """Update an existing user"""
  updateUser(input: updateUserInput): updateUserPayload
  """Delete an existing user"""
  deleteUser(input: deleteUserInput): deleteUserPayload
  upload(refId: ID, ref: String, field: String, source: String, info: FileInfoInput, file: Upload!): UploadFile!
  multipleUpload(refId: ID, ref: String, field: String, source: String, files: [Upload]!): [UploadFile]!
  updateFileInfo(id: ID!, info: FileInfoInput!): UploadFile!
  login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!
  register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!
  forgotPassword(email: String!): UserPermissionsPasswordPayload
  resetPassword(password: String!, passwordConfirmation: String!, code: String!): UsersPermissionsLoginPayload
  emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload
}

"""The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf)."""
scalar JSON

"""A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar."""
scalar DateTime

"""A time string with format: HH:mm:ss.SSS"""
scalar Time

"""A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar."""
scalar Date

"""The `Long` scalar type represents 52-bit integers"""
scalar Long

"""The `Upload` scalar type represents a file upload."""
scalar Upload
